1. HTML, CSS, and Boxes.

HTML elements are always rectangular.

HTML-CSS-DOM
	HTML - HyperText Markup Language - the standard markup language used to create web pages.

	CSS - Cascading Style Sheets - style sheet language used for describing the look and formatting of a document written in a markup language.

	DOM - Document Object Model - a cross-platform and language-independent convention for representing and interacting with objects in HTML (and other markup languages). The nodes of every document are organized in a tree structure, called the DOM tree.

CSS border-radius
	w/o the element will be a square

Tag
	HTML 
		<tag attribute=value></tag>

		link tag coding
			<link rel="stylesheet" href="style.css">
				Udacity Developer Style Guide recommends ommiting 
					type="text/css"
				from the tag

		<head> tag
			add link to style file.
			must contain <title>TITLE</title> to pass validation.
	CSS
		.class{
			attribute:value;
		}

		#id{
			attribute:value;
		}

	semantic tags
		content sectioning
			https://developer.mozilla.org/en-US/docs/Web/HTML/Element#Content_sectioning
		HTML5 outline algorithm
			https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Sections_and_Outlines_of_an_HTML5_document#The_HTML5_Outline_Algorithm

Understanding CSS
	Order Matters
		It also matters where you define the rules and in what order they are applied. Styles can be defined in different places and are applied in the following order, with definitions further down the list overwriting previous definitions:

		- the default style of a browser (different browsers have slightly different styles)
		- stylesheet in a separate file (this is what you will be mostly using)
		- stylesheet inside HTML (this can be done for small projects but is not ideal)
		- inline style in an element (this can also be done but should be avoided)
	Specifics Matter
		"Cascading" means that rules are applied not only to the elements they directly match, but also to all of those elements' child elements. However, if a child element has multiple, overlapping rules defined for it, the more specific rule takes effect.

CSS styles
	MDN CSS Reference -- attribute:value list
		https://developer.mozilla.org/en-US/docs/Web/CSS/Reference
	How CSS selector works
		https://css-tricks.com/how-css-selectors-work/
	Default style rules for common broswers:
		WebKit (Chrome and Safari)
			http://trac.webkit.org/browser/trunk/Source/WebCore/css/html.css
		Firefox
			https://developer.mozilla.org/en-US/docs/Web/CSS/Reference
		IE
			http://www.iecss.com/
	CSS Resetting/Normalizing to keep consistency across browsers
		http://necolas.github.io/normalize.css/
		HTML
			<head>
				<link rel="stylesheet" src="//normalize-css.googlecode.com/svn/trunk/normalize.css">
			</head>

CSS common attributes:value pairs
	font-style:normal/italic/oblique;
	font-weight:bold;

The Box Model
	inside -> outside
		content]padding]border]margin]
			padding: affected by the background color of the box.
			border: inherit from the color property of the box.
			margin: don't have background color and is completely transparent.

	Demo page
		http://assignments.udacity-extras.appspot.com/courses/html-css/samples/box-model.html
	CSS trick: border-box, set up box size excluding margin
		add this code in style.css
			* {
			    -webkit-box-sizing: border-box;
			    -moz-box-sizing: border-box;
			    -ms-box-sizing: border-box;
			    box-sizing: border-box;
			} 
	setting box in percentage instead of pixels
		.description{
			width:50%;
		}
	setting box the max-width
		.description{
			max-width:460px;
		}

CSS positioning -- Flex Box layout
	Flex box: flexible box that layout, align and distribute space among items in a container or div. 
	Usage
		change the display attribute of parent container & Give child items size smaller than 100%.
			HTML
				<div class="app" style="display:flex;">
			CSS
				.app{
					display: -webkit-flex; #TO SUPPORT Safari.
					display:flex;
					flex-direction:row/row-reverse/column/column-reverse;
				}

				.description{
					width:50%; /*50% of app*/
				}
	Complete Guide to Flex
		http://css-tricks.com/snippets/css/a-guide-to-flexbox/

	To center element horizontally:
		.class{
			margin: 0 auto;
		}
	To align text
		h1{
			text-align:center;
		}

Image
	ALWAYS fill in the "alt" attributes
	<img src="/.../img.png" alt="INCASE BROWSER CANNOT DISPLAY IMAGE/ ACCESSIBILITY">


Code, Test, and Refine
	1. Get the structure of the page right -- Boxify page.
		size, position of box.
	2. Tags: repeated styles & semantic elements.
	3. Write HTML.
	4. Apply styles (from Biggest site-wise element to smallest-like widgets). 
	5. Fix things. 

Verifying 
	HTML
		http://validator.w3.org/#validate_by_input
	CSS
		http://jigsaw.w3.org/css-validator/#validate_by_input

CSS tricks for debugging
	Add the following codes in CSS files to look at boxes clearly.
		* {
		    border: 1px solid red !important;
		}

		* {
		    -webkit-box-sizing: border-box;
		    -moz-box-sizing: border-box;
		    -ms-box-sizing: border-box;
		    box-sizing: border-box;
		}

2. CSS Frameworks, Responsive Layouts.
CSS frameworks
	Def: CSS frameworks are pre-prepared software frameworks that are meant to allow for easier, more standards-compliant web design using the Cascading Style Sheets language. Most of these frameworks contain at least a grid. 	/Collections of CSS classes that make page layout easy to implement. 

Responsive webpages
	Dft devices -> dft resolutions of screen in pixels (not device's fixed size).
	Responsive design: website isn't fixed with single size. page will resize to fit. 
	Desktop screen
		common practice: set max-width to be 960px. Not 1024px to leave room on the side of the screen for scroll bars. For larger screen of 1920px/1440px, simple center the 960px wide content to make sure it still looks good.
	Tablets & phones
		two orientations; use thumbs not mouse [adaptive design: change layout further to adapt to use].

	Use percentage size instead of fixed size to define column width.

	Media queries
		change css properties depending on device, screen size, and color.
		code
			@media only screen/print and () {}


Grid system
	Create 12 columns.
		CSS classess to create 
		1) .row of 100% page width
			NAMING: .row
		2) .column of 1/12 - 2/12 page width
			1/12 = 8.33%, 2/12=16.66%, ...
			NAMING: col-1, col-2, ..., col-12

	Create a class "grid" for an outer div to contain all other grid divs
		Purpose: to limit the max-width of the page and center content in case user is looking at the page on a very large screen.
		To align columns next to each other when their width is fixed

	To display them next to each other, add this line in CSS code
		.row{display:flex; flex-wrap:wrap;}

		Flex
			https://developer.mozilla.org/en-US/docs/Web/CSS/flex
		Flex-wrap
			https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap

	Negative space
		.col-4{padding: inside the element
		margin: outside the element}

	Overflow
		.class{overflow:auto;}

	Grid Template
		see "Udacity/304_Intro_to_HTML_and_CSS/portfolio/framework/"
			html: "grid_template.html"
			css: "/css/main.css"

Font
	google fonts: https://fonts.google.com/
Placehold images
	src="http://placehold.it/555x300"
	http://placekitten.com/


Front-end frameworks to choose
	Bootstrap: http://getbootstrap.com/ 
	Foundation: http://foundation.zurb.com/ 
	Yaml: http://www.yaml.de/ 
	960 Grid: http://960.gs/ 
	Susy: http://susy.oddbird.net/ 


Bootstrap
	Bootstrap CSS Documentation: http://getbootstrap.com/css/
	Usage
		1) copy the css and js folders to project folder.
		2) include the head element in files:
			<link rel="stylesheet" href="css/bootstrap.min.css">
			<script src="js/bootstrap.min.css"></script>
		3) also add this meta tag in head
			<meta name="viewport" content="width=device-width, initial-scale=1">

		4) Put everything (rows) in a container 
			.container (fixed-width) or .container-fluid (full-width) for proper alignment and padding.

			<div class="container"/"container-fluid">
				<div class="row">
					<div class="col-md-6"></div>
					<div class="col-md-6"></div>
				</div>
			</div>

		Use rows to create horizontal groups of columns.
		content should be placed within columns, and only columns may be immediate children of rows.

	Images
		Responsive Image to help avoid overflow
			<img src="..." class="img-responsive" alt="Responsive Image">

			To center the image using the .img-responsive class, use .center-block instead of .text-center.

	Typography
		right-align text: .text-right
		uppdercase: text-uppercase		


	Responsive design


	Minifed CSS files
		same content as the normal CSS file but takes whitespace out. Will make the size smaller, but less human-readable as the normal version.
		
		manually minify CSS
			http://cssminifier.com/
		automatic minify 
			code editor plugin
			a build system Gruntjs: http://gruntjs.com/

	Customization
		add own style sheet in the head

	JavaScript
		<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
	
		Add JQuery & JS to head
		    <script src="js/jquery-3.1.1.min.js"></script>
	   		<script src="js/bootstrap.min.js"></script>

Nanodegree style guide
	https://udacity.github.io/frontend-nanodegree-styleguide



































